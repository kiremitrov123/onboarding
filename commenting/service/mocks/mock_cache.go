// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/google/uuid"
	"github.com/kiremitrov123/onboarding/commenting/model"
	"github.com/kiremitrov123/onboarding/commenting/service"
	"sync"
)

// Ensure, that CommentCacheMock does implement service.CommentCache.
// If this is not the case, regenerate this file with moq.
var _ service.CommentCache = &CommentCacheMock{}

// CommentCacheMock is a mock implementation of service.CommentCache.
//
//	func TestSomethingThatUsesCommentCache(t *testing.T) {
//
//		// make and configure a mocked service.CommentCache
//		mockedCommentCache := &CommentCacheMock{
//			GetCommentByIDFunc: func(ctx context.Context, commentID uuid.UUID) (*model.Comment, error) {
//				panic("mock out the GetCommentByID method")
//			},
//			ListCommentsFunc: func(ctx context.Context, threadID uuid.UUID, sortKey string, cursor int64, limit int, fallback model.QueryCommentsFunc) ([]model.Comment, error) {
//				panic("mock out the ListComments method")
//			},
//			SetCommentFunc: func(ctx context.Context, comment *model.Comment) error {
//				panic("mock out the SetComment method")
//			},
//			UpdateCommentScoreFunc: func(ctx context.Context, commentID uuid.UUID, field string, delta int) error {
//				panic("mock out the UpdateCommentScore method")
//			},
//		}
//
//		// use mockedCommentCache in code that requires service.CommentCache
//		// and then make assertions.
//
//	}
type CommentCacheMock struct {
	// GetCommentByIDFunc mocks the GetCommentByID method.
	GetCommentByIDFunc func(ctx context.Context, commentID uuid.UUID) (*model.Comment, error)

	// ListCommentsFunc mocks the ListComments method.
	ListCommentsFunc func(ctx context.Context, threadID uuid.UUID, sortKey string, cursor int64, limit int, fallback model.QueryCommentsFunc) ([]model.Comment, error)

	// SetCommentFunc mocks the SetComment method.
	SetCommentFunc func(ctx context.Context, comment *model.Comment) error

	// UpdateCommentScoreFunc mocks the UpdateCommentScore method.
	UpdateCommentScoreFunc func(ctx context.Context, commentID uuid.UUID, field string, delta int) error

	// calls tracks calls to the methods.
	calls struct {
		// GetCommentByID holds details about calls to the GetCommentByID method.
		GetCommentByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CommentID is the commentID argument value.
			CommentID uuid.UUID
		}
		// ListComments holds details about calls to the ListComments method.
		ListComments []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ThreadID is the threadID argument value.
			ThreadID uuid.UUID
			// SortKey is the sortKey argument value.
			SortKey string
			// Cursor is the cursor argument value.
			Cursor int64
			// Limit is the limit argument value.
			Limit int
			// Fallback is the fallback argument value.
			Fallback model.QueryCommentsFunc
		}
		// SetComment holds details about calls to the SetComment method.
		SetComment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Comment is the comment argument value.
			Comment *model.Comment
		}
		// UpdateCommentScore holds details about calls to the UpdateCommentScore method.
		UpdateCommentScore []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CommentID is the commentID argument value.
			CommentID uuid.UUID
			// Field is the field argument value.
			Field string
			// Delta is the delta argument value.
			Delta int
		}
	}
	lockGetCommentByID     sync.RWMutex
	lockListComments       sync.RWMutex
	lockSetComment         sync.RWMutex
	lockUpdateCommentScore sync.RWMutex
}

// GetCommentByID calls GetCommentByIDFunc.
func (mock *CommentCacheMock) GetCommentByID(ctx context.Context, commentID uuid.UUID) (*model.Comment, error) {
	if mock.GetCommentByIDFunc == nil {
		panic("CommentCacheMock.GetCommentByIDFunc: method is nil but CommentCache.GetCommentByID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		CommentID uuid.UUID
	}{
		Ctx:       ctx,
		CommentID: commentID,
	}
	mock.lockGetCommentByID.Lock()
	mock.calls.GetCommentByID = append(mock.calls.GetCommentByID, callInfo)
	mock.lockGetCommentByID.Unlock()
	return mock.GetCommentByIDFunc(ctx, commentID)
}

// GetCommentByIDCalls gets all the calls that were made to GetCommentByID.
// Check the length with:
//
//	len(mockedCommentCache.GetCommentByIDCalls())
func (mock *CommentCacheMock) GetCommentByIDCalls() []struct {
	Ctx       context.Context
	CommentID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		CommentID uuid.UUID
	}
	mock.lockGetCommentByID.RLock()
	calls = mock.calls.GetCommentByID
	mock.lockGetCommentByID.RUnlock()
	return calls
}

// ListComments calls ListCommentsFunc.
func (mock *CommentCacheMock) ListComments(ctx context.Context, threadID uuid.UUID, sortKey string, cursor int64, limit int, fallback model.QueryCommentsFunc) ([]model.Comment, error) {
	if mock.ListCommentsFunc == nil {
		panic("CommentCacheMock.ListCommentsFunc: method is nil but CommentCache.ListComments was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ThreadID uuid.UUID
		SortKey  string
		Cursor   int64
		Limit    int
		Fallback model.QueryCommentsFunc
	}{
		Ctx:      ctx,
		ThreadID: threadID,
		SortKey:  sortKey,
		Cursor:   cursor,
		Limit:    limit,
		Fallback: fallback,
	}
	mock.lockListComments.Lock()
	mock.calls.ListComments = append(mock.calls.ListComments, callInfo)
	mock.lockListComments.Unlock()
	return mock.ListCommentsFunc(ctx, threadID, sortKey, cursor, limit, fallback)
}

// ListCommentsCalls gets all the calls that were made to ListComments.
// Check the length with:
//
//	len(mockedCommentCache.ListCommentsCalls())
func (mock *CommentCacheMock) ListCommentsCalls() []struct {
	Ctx      context.Context
	ThreadID uuid.UUID
	SortKey  string
	Cursor   int64
	Limit    int
	Fallback model.QueryCommentsFunc
} {
	var calls []struct {
		Ctx      context.Context
		ThreadID uuid.UUID
		SortKey  string
		Cursor   int64
		Limit    int
		Fallback model.QueryCommentsFunc
	}
	mock.lockListComments.RLock()
	calls = mock.calls.ListComments
	mock.lockListComments.RUnlock()
	return calls
}

// SetComment calls SetCommentFunc.
func (mock *CommentCacheMock) SetComment(ctx context.Context, comment *model.Comment) error {
	if mock.SetCommentFunc == nil {
		panic("CommentCacheMock.SetCommentFunc: method is nil but CommentCache.SetComment was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Comment *model.Comment
	}{
		Ctx:     ctx,
		Comment: comment,
	}
	mock.lockSetComment.Lock()
	mock.calls.SetComment = append(mock.calls.SetComment, callInfo)
	mock.lockSetComment.Unlock()
	return mock.SetCommentFunc(ctx, comment)
}

// SetCommentCalls gets all the calls that were made to SetComment.
// Check the length with:
//
//	len(mockedCommentCache.SetCommentCalls())
func (mock *CommentCacheMock) SetCommentCalls() []struct {
	Ctx     context.Context
	Comment *model.Comment
} {
	var calls []struct {
		Ctx     context.Context
		Comment *model.Comment
	}
	mock.lockSetComment.RLock()
	calls = mock.calls.SetComment
	mock.lockSetComment.RUnlock()
	return calls
}

// UpdateCommentScore calls UpdateCommentScoreFunc.
func (mock *CommentCacheMock) UpdateCommentScore(ctx context.Context, commentID uuid.UUID, field string, delta int) error {
	if mock.UpdateCommentScoreFunc == nil {
		panic("CommentCacheMock.UpdateCommentScoreFunc: method is nil but CommentCache.UpdateCommentScore was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		CommentID uuid.UUID
		Field     string
		Delta     int
	}{
		Ctx:       ctx,
		CommentID: commentID,
		Field:     field,
		Delta:     delta,
	}
	mock.lockUpdateCommentScore.Lock()
	mock.calls.UpdateCommentScore = append(mock.calls.UpdateCommentScore, callInfo)
	mock.lockUpdateCommentScore.Unlock()
	return mock.UpdateCommentScoreFunc(ctx, commentID, field, delta)
}

// UpdateCommentScoreCalls gets all the calls that were made to UpdateCommentScore.
// Check the length with:
//
//	len(mockedCommentCache.UpdateCommentScoreCalls())
func (mock *CommentCacheMock) UpdateCommentScoreCalls() []struct {
	Ctx       context.Context
	CommentID uuid.UUID
	Field     string
	Delta     int
} {
	var calls []struct {
		Ctx       context.Context
		CommentID uuid.UUID
		Field     string
		Delta     int
	}
	mock.lockUpdateCommentScore.RLock()
	calls = mock.calls.UpdateCommentScore
	mock.lockUpdateCommentScore.RUnlock()
	return calls
}
