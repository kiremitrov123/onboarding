// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/kiremitrov123/onboarding/texteditor/model"
	"github.com/kiremitrov123/onboarding/texteditor/redis"
	"sync"
)

// Ensure, that PubSubMock does implement redis.PubSub.
// If this is not the case, regenerate this file with moq.
var _ redis.PubSub = &PubSubMock{}

// PubSubMock is a mock implementation of redis.PubSub.
//
//	func TestSomethingThatUsesPubSub(t *testing.T) {
//
//		// make and configure a mocked redis.PubSub
//		mockedPubSub := &PubSubMock{
//			PublishEditFunc: func(ctx context.Context, docID string, edit model.Edit) error {
//				panic("mock out the PublishEdit method")
//			},
//			SubscribeEditsFunc: func(ctx context.Context, docID string, handler func(model.Edit)) error {
//				panic("mock out the SubscribeEdits method")
//			},
//		}
//
//		// use mockedPubSub in code that requires redis.PubSub
//		// and then make assertions.
//
//	}
type PubSubMock struct {
	// PublishEditFunc mocks the PublishEdit method.
	PublishEditFunc func(ctx context.Context, docID string, edit model.Edit) error

	// SubscribeEditsFunc mocks the SubscribeEdits method.
	SubscribeEditsFunc func(ctx context.Context, docID string, handler func(model.Edit)) error

	// calls tracks calls to the methods.
	calls struct {
		// PublishEdit holds details about calls to the PublishEdit method.
		PublishEdit []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DocID is the docID argument value.
			DocID string
			// Edit is the edit argument value.
			Edit model.Edit
		}
		// SubscribeEdits holds details about calls to the SubscribeEdits method.
		SubscribeEdits []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DocID is the docID argument value.
			DocID string
			// Handler is the handler argument value.
			Handler func(model.Edit)
		}
	}
	lockPublishEdit    sync.RWMutex
	lockSubscribeEdits sync.RWMutex
}

// PublishEdit calls PublishEditFunc.
func (mock *PubSubMock) PublishEdit(ctx context.Context, docID string, edit model.Edit) error {
	if mock.PublishEditFunc == nil {
		panic("PubSubMock.PublishEditFunc: method is nil but PubSub.PublishEdit was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		DocID string
		Edit  model.Edit
	}{
		Ctx:   ctx,
		DocID: docID,
		Edit:  edit,
	}
	mock.lockPublishEdit.Lock()
	mock.calls.PublishEdit = append(mock.calls.PublishEdit, callInfo)
	mock.lockPublishEdit.Unlock()
	return mock.PublishEditFunc(ctx, docID, edit)
}

// PublishEditCalls gets all the calls that were made to PublishEdit.
// Check the length with:
//
//	len(mockedPubSub.PublishEditCalls())
func (mock *PubSubMock) PublishEditCalls() []struct {
	Ctx   context.Context
	DocID string
	Edit  model.Edit
} {
	var calls []struct {
		Ctx   context.Context
		DocID string
		Edit  model.Edit
	}
	mock.lockPublishEdit.RLock()
	calls = mock.calls.PublishEdit
	mock.lockPublishEdit.RUnlock()
	return calls
}

// SubscribeEdits calls SubscribeEditsFunc.
func (mock *PubSubMock) SubscribeEdits(ctx context.Context, docID string, handler func(model.Edit)) error {
	if mock.SubscribeEditsFunc == nil {
		panic("PubSubMock.SubscribeEditsFunc: method is nil but PubSub.SubscribeEdits was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		DocID   string
		Handler func(model.Edit)
	}{
		Ctx:     ctx,
		DocID:   docID,
		Handler: handler,
	}
	mock.lockSubscribeEdits.Lock()
	mock.calls.SubscribeEdits = append(mock.calls.SubscribeEdits, callInfo)
	mock.lockSubscribeEdits.Unlock()
	return mock.SubscribeEditsFunc(ctx, docID, handler)
}

// SubscribeEditsCalls gets all the calls that were made to SubscribeEdits.
// Check the length with:
//
//	len(mockedPubSub.SubscribeEditsCalls())
func (mock *PubSubMock) SubscribeEditsCalls() []struct {
	Ctx     context.Context
	DocID   string
	Handler func(model.Edit)
} {
	var calls []struct {
		Ctx     context.Context
		DocID   string
		Handler func(model.Edit)
	}
	mock.lockSubscribeEdits.RLock()
	calls = mock.calls.SubscribeEdits
	mock.lockSubscribeEdits.RUnlock()
	return calls
}
