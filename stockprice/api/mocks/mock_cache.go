// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/kiremitrov123/onboarding/stockprice/api"
	"github.com/kiremitrov123/onboarding/stockprice/model"
	"sync"
)

// Ensure, that CacheMock does implement api.Cache.
// If this is not the case, regenerate this file with moq.
var _ api.Cache = &CacheMock{}

// CacheMock is a mock implementation of api.Cache.
//
//	func TestSomethingThatUsesCache(t *testing.T) {
//
//		// make and configure a mocked api.Cache
//		mockedCache := &CacheMock{
//			GetFunc: func(ctx context.Context, symbol string) (*model.Price, error) {
//				panic("mock out the Get method")
//			},
//			SetFunc: func(ctx context.Context, symbol string, price model.Price) error {
//				panic("mock out the Set method")
//			},
//			SubscribeInvalidationFunc: func(ctx context.Context, onInvalidate func(key string)) error {
//				panic("mock out the SubscribeInvalidation method")
//			},
//		}
//
//		// use mockedCache in code that requires api.Cache
//		// and then make assertions.
//
//	}
type CacheMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, symbol string) (*model.Price, error)

	// SetFunc mocks the Set method.
	SetFunc func(ctx context.Context, symbol string, price model.Price) error

	// SubscribeInvalidationFunc mocks the SubscribeInvalidation method.
	SubscribeInvalidationFunc func(ctx context.Context, onInvalidate func(key string)) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Symbol is the symbol argument value.
			Symbol string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Symbol is the symbol argument value.
			Symbol string
			// Price is the price argument value.
			Price model.Price
		}
		// SubscribeInvalidation holds details about calls to the SubscribeInvalidation method.
		SubscribeInvalidation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OnInvalidate is the onInvalidate argument value.
			OnInvalidate func(key string)
		}
	}
	lockGet                   sync.RWMutex
	lockSet                   sync.RWMutex
	lockSubscribeInvalidation sync.RWMutex
}

// Get calls GetFunc.
func (mock *CacheMock) Get(ctx context.Context, symbol string) (*model.Price, error) {
	if mock.GetFunc == nil {
		panic("CacheMock.GetFunc: method is nil but Cache.Get was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Symbol string
	}{
		Ctx:    ctx,
		Symbol: symbol,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, symbol)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedCache.GetCalls())
func (mock *CacheMock) GetCalls() []struct {
	Ctx    context.Context
	Symbol string
} {
	var calls []struct {
		Ctx    context.Context
		Symbol string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *CacheMock) Set(ctx context.Context, symbol string, price model.Price) error {
	if mock.SetFunc == nil {
		panic("CacheMock.SetFunc: method is nil but Cache.Set was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Symbol string
		Price  model.Price
	}{
		Ctx:    ctx,
		Symbol: symbol,
		Price:  price,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	return mock.SetFunc(ctx, symbol, price)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//
//	len(mockedCache.SetCalls())
func (mock *CacheMock) SetCalls() []struct {
	Ctx    context.Context
	Symbol string
	Price  model.Price
} {
	var calls []struct {
		Ctx    context.Context
		Symbol string
		Price  model.Price
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}

// SubscribeInvalidation calls SubscribeInvalidationFunc.
func (mock *CacheMock) SubscribeInvalidation(ctx context.Context, onInvalidate func(key string)) error {
	if mock.SubscribeInvalidationFunc == nil {
		panic("CacheMock.SubscribeInvalidationFunc: method is nil but Cache.SubscribeInvalidation was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		OnInvalidate func(key string)
	}{
		Ctx:          ctx,
		OnInvalidate: onInvalidate,
	}
	mock.lockSubscribeInvalidation.Lock()
	mock.calls.SubscribeInvalidation = append(mock.calls.SubscribeInvalidation, callInfo)
	mock.lockSubscribeInvalidation.Unlock()
	return mock.SubscribeInvalidationFunc(ctx, onInvalidate)
}

// SubscribeInvalidationCalls gets all the calls that were made to SubscribeInvalidation.
// Check the length with:
//
//	len(mockedCache.SubscribeInvalidationCalls())
func (mock *CacheMock) SubscribeInvalidationCalls() []struct {
	Ctx          context.Context
	OnInvalidate func(key string)
} {
	var calls []struct {
		Ctx          context.Context
		OnInvalidate func(key string)
	}
	mock.lockSubscribeInvalidation.RLock()
	calls = mock.calls.SubscribeInvalidation
	mock.lockSubscribeInvalidation.RUnlock()
	return calls
}
